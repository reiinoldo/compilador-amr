#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
min: [a-z]
mai: [A-Z]
letra: {mai}|{min}
digito: [0-9]
num_inteiro: 0|[1-9]{digito}?{digito}?{digito}?{digito}?
parte_frac: 0|{digito}?{digito}?{digito}?{digito}?[1-9]
comentario_linha:"/" "/"[^\n]*
comentario_bloco: "{"[^"}"]*}


#Tokens
//Identificador
identificador: ({letra}|_{letra})({letra}|{digito}|_{letra})*

//Constantes
const_integer: {num_inteiro}
const_float: {num_inteiro},{parte_frac}
const_string:\"([^\"\\\n]|\\(\"|\\))*\"

//simbolos especiais
"+"
"-"
"*"
"/"
"="
"&&"
"||"
"!"
"=="
"!="
"<"
"<="
">"
">="
","
";"
"("
")"

//palavras reservadas
pr_boolean = identificador: "boolean"
pr_do = identificador: "do"
pr_else = identificador: "else"
pr_end = identificador: "end"
pr_false = identificador: "false"
pr_float = identificador: "float"
pr_if = identificador: "if"
pr_integer = identificador: "integer"
pr_main = identificador: "main"
pr_print = identificador: "print"
pr_println = identificador: "println"
pr_scan = identificador: "scan"
pr_string = identificador: "string"
pr_true = identificador: "true"
pr_void = identificador: "void"
pr_while = identificador: "while"
pr_global = identificador: "global"
pr_local = identificador: "local"
pr_return = identificador: "return"

//Ignorados
: {comentario_linha}
:! {comentario_bloco}
: [\s\t\n\r]*

#NonTerminals
<programa>
<var_glob>
<variaveis>
<tipo>
<lista_id>
<valor>
<constante>
<const_boolean>
<lista_mod>
<modulo>
<tipo_mod>
<lista_param>
<lista_param_aux>
<parametro>
<var_locais>
<retorno>
<lista_cmd>
<comando>
<cmd_atribuicao>
<cmd_entrada>
<cmd_saida>
<lista_expr>
<cmd_selecao>
<else>
<cmd_repeticao>
<cmd_modulo>
<param_reais>
//Criados nessa etapa
<expressao>
<elemento>
<relacional>
<operador_relacional>
<aritmetica>
<termo>
<fator>
#Grammar
<programa> ::= pr_main <var_glob> <lista_mod> <lista_cmd> pr_end ;
<var_glob> ::= î | pr_global <variaveis> <var_glob> ;
<variaveis>::= <tipo> <lista_id> <valor> ";" ;
<tipo> ::= pr_boolean | pr_float | pr_integer | pr_string ;
<lista_id> ::= identificador | identificador "," <lista_id> ;
<valor> ::= î | "=" <constante> ;
<constante> ::= const_integer | const_float | const_string | <const_boolean> ;
<const_boolean> ::= pr_true | pr_false ;
<lista_mod> ::= î | <modulo> <lista_mod> ;
<modulo> ::= <tipo_mod> identificador "(" <lista_param> ")" <var_locais> <lista_cmd> <retorno> pr_end ;
<tipo_mod> ::= <tipo> | pr_void ;
<lista_param> ::= î | <lista_param_aux> ;
<lista_param_aux> ::= <parametro> | <parametro> "," <lista_param_aux> ;
<parametro> ::= <tipo> identificador ;
<var_locais> ::= î | pr_local <variaveis> <var_locais> ;
<retorno> ::= î | pr_return <expressao> ";" ;
<lista_cmd> ::= î | <comando> <lista_cmd> ;
<comando> ::= <cmd_atribuicao> | <cmd_entrada> | <cmd_saida> | <cmd_selecao> | <cmd_repeticao> | <cmd_modulo> ;
<cmd_atribuicao> ::= identificador "=" <expressao> ";" ;
<cmd_entrada> ::= pr_scan "(" <lista_id> ")" ";" ;
<cmd_saida> ::= pr_print "(" <lista_expr> ")" ";"| pr_println "(" <lista_expr> ")" ";" ;
<lista_expr>::= <expressao> | <expressao> "," <lista_expr> ";" ;
<cmd_selecao> ::= pr_if "(" <expressao> ")" <lista_cmd> <else> pr_end ";" ;
<else> ::= î | pr_else <lista_cmd> ;
<cmd_repeticao> ::= pr_do <lista_cmd> pr_while "(" <expressao> ")" ";" ;
<cmd_modulo> ::= identificador "(" <param_reais> ")" ";" ;
<param_reais> ::= î | <lista_expr> ;
//Criados nessa etapa
<expressao> ::= <expressao> "||"  <elemento> | <expressao> "&&" <elemento> | <elemento> ;
<elemento> ::= <relacional> | pr_true | pr_false |  "!" <elemento> ; 
<relacional> ::= <aritmetica> <operador_relacional> <aritmetica> | <aritmetica> ;
<operador_relacional> ::= "==" | "!=" | "<" | "<=" | ">" | ">=" ;
<aritmetica> ::= <aritmetica> "+" <termo> | <aritmetica> "-" <termo> | <termo> ;
<termo> ::= <termo> "*" <fator> | <termo> "/" <fator> | <fator> ;
<fator> ::= identificador | identificador "(" <lista_expr> ")" | const_integer | const_float | const_string | "(" <expressao> ")" | "+" <fator> | "-" <fator> ;
