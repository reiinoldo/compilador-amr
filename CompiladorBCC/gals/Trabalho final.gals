#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = false
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions
min: [a-z]
mai: [A-Z]
letra: {mai}|{min}
digito: [0-9]
num_inteiro: 0|[1-9]{digito}?{digito}?{digito}?{digito}?
parte_frac: 0|{digito}?{digito}?{digito}?{digito}?[1-9]
comentario_linha:"/" "/"[^\n]*
comentario_bloco: "{"[^"}"]*}


#Tokens
//Identificador
identificador: ({letra}|_{letra})({letra}|{digito}|_{letra})*

//Constantes
const_integer: {num_inteiro}
const_float: {num_inteiro},{parte_frac}
const_string:\"([^\"\\\n]|\\(\"|\\))*\"

//simbolos especiais
"+"
"-"
"*"
"/"
"="
"&&"
"||"
"!"
"=="
"!="
"<"
"<="
">"
">="
","
";"
"("
")"

//palavras reservadas
pr_boolean = identificador: "boolean"
pr_do = identificador: "do"
pr_else = identificador: "else"
pr_end = identificador: "end"
pr_false = identificador: "false"
pr_float = identificador: "float"
pr_if = identificador: "if"
pr_integer = identificador: "integer"
pr_main = identificador: "main"
pr_print = identificador: "print"
pr_println = identificador: "println"
pr_scan = identificador: "scan"
pr_string = identificador: "string"
pr_true = identificador: "true"
pr_void = identificador: "void"
pr_while = identificador: "while"
pr_global = identificador: "global"
pr_local = identificador: "local"
pr_return = identificador: "return"

//Ignorados
:! {comentario_linha}
:! {comentario_bloco}
: [\s\t\n\r]*

#NonTerminals
<programa>
<var_glob>
<variaveis>
<tipo>
<lista_id>
<valor>
<constante>
<const_boolean>
<lista_mod>
<modulo>
<tipo_mod>
<lista_param>
<lista_param_aux>
<parametro>
<var_locais>
<retorno>
<lista_cmd>
<comando>
<cmd_entrada>
<cmd_saida>
<lista_expr>
<cmd_selecao>
<else>
<cmd_repeticao>
<param_reais>
//Criados nessa etapa
<expressao>
<elemento>
<relacional>
<operador_relacional>
<aritmetica>
<termo>
<fator>
<lista_id1>
<lista_param_aux1>
<comando1>
<lista_expr1>
<expressao1>
<relacional1>
<aritmetica1>
<termo1>
<fator1>
#Grammar
<programa> ::= #15 pr_main <var_glob> <lista_mod> <lista_cmd> pr_end #16;
<var_glob> ::= î | pr_global <variaveis> <var_glob> ;
<variaveis>::= <tipo> #24 <lista_id> #26 <valor> ";" ;
<tipo> ::= pr_boolean | pr_float | pr_integer | pr_string ;
<lista_id> ::= identificador #25 <lista_id1> ;
<lista_id1> ::= î | "," <lista_id> ;
<valor> ::= î | "=" <constante> #30 ;
<constante> ::= const_integer | const_float | const_string | <const_boolean> ;
<const_boolean> ::= pr_true | pr_false ;
<lista_mod> ::= î | <modulo> <lista_mod> ;
<modulo> ::= <tipo_mod> identificador "(" <lista_param> ")" <var_locais> <lista_cmd> <retorno> pr_end ;
<tipo_mod> ::= <tipo> | pr_void ;
<lista_param> ::= î | <lista_param_aux> ;
<lista_param_aux> ::= <parametro> <lista_param_aux1> ;
<lista_param_aux1> ::= î | "," <lista_param_aux> ;
<parametro> ::= <tipo> identificador ;
<var_locais> ::= î | pr_local <variaveis> <var_locais> ;
<retorno> ::= î | pr_return <expressao> ";" ;
<lista_cmd> ::= î | <comando> <lista_cmd> ;
<comando> ::= identificador #25 <comando1> | <cmd_entrada> | <cmd_saida> | <cmd_selecao> | <cmd_repeticao> ;
<comando1> ::= "=" <expressao> #29 ";" | "(" <param_reais> ")" ";" ;
<cmd_entrada> ::= pr_scan "(" <lista_id> #27 ")" ";" ;
<cmd_saida> ::= pr_print "(" <lista_expr> ")" ";"| pr_println "(" <lista_expr> #17 ")" ";" ;
<lista_expr>::= <expressao> #14 <lista_expr1> ;
<lista_expr1> ::= î |  "," <lista_expr> ;
<cmd_selecao> ::= pr_if "(" <expressao> ")" #31 <lista_cmd> <else> pr_end #32 ";" ;
<else> ::= î | pr_else #33 <lista_cmd> ;
<cmd_repeticao> ::= pr_do #34 <lista_cmd> pr_while "(" <expressao> ")" #35 ";" ;
<param_reais> ::= î | <lista_expr> ;
<expressao> ::= <elemento> <expressao1> ;
<expressao1> ::= î | "||"  <elemento> #18 <expressao1> | "&&" <elemento> #19 <expressao1> ;
<elemento> ::= <relacional> | pr_true #11 | pr_false #12 |  "!" <elemento> #13 ;
<relacional> ::= <aritmetica> <relacional1> ;
<relacional1> ::= <operador_relacional> #20 <aritmetica> #21 | î ;
<operador_relacional> ::= "==" | "!=" | "<" | "<=" | ">" | ">=" ;
<aritmetica> ::= <termo> <aritmetica1>;
<aritmetica1> ::= î | "+" <termo> #1 <aritmetica1> | "-" <termo> #2 <aritmetica1> ;
<termo> ::= <fator> <termo1> ;
<termo1> ::= î | "*" <fator> #3 <termo1> | "/" <fator> #4 <termo1> ;
<fator> ::= identificador #28 <fator1> | const_integer #5 | const_float #6 | const_string #22 | "(" <expressao> ")" | "+" <fator> #23 | "-" <fator> #7 ;
<fator1> ::= î | "(" <lista_expr> ")" ;
